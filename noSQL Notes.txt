INSTALL

install kv-4.3.11 and unzip into c:\Oracle\nosqldb
cd into: \Oracle\nosqldb\kv-4.3.11>
run: java -jar lib/kvstore.jar kvlite -secure-config disable
will set up default kvstore

COMMANDS
  TableAPI tableH = kvstore.getTableAPI();
        Table myTable = tableH.getTable("personContacts");

        // Construct the IndexKey.
        Index homeCityIdx = myTable.getIndex("idx_home_city");
        IndexKey homeCityIdxKey = null;

        // If NullPointerException is thrown by createIndexKey(),
        // it means that the required index has not been created.
        // Run the createIndex() method before running this method.
        homeCityIdxKey = homeCityIdx.createIndexKey();

        // Return only those entries with a home city of "Boston"
        homeCityIdxKey.put("person.address.home.city", "Boston");

  TableIterator<Row> iter =
            tableH.tableIterator(homeCityIdxKey, null, null);
        try {
            while (iter.hasNext()) {
                Row row = iter.next();
                updateZipCode(tableH, row, "home", "02102-1000");


// Dumps the entire table to the command line.
    // Output is unformatted.
    private void displayTable(KVStore kvstore) {
        TableAPI tableH = kvstore.getTableAPI();
        Table myTable = tableH.getTable("personContacts");

        PrimaryKey pkey = myTable.createPrimaryKey();
        TableIterator<Row> iter = tableH.tableIterator(pkey, null,
                null);
        try {
            while (iter.hasNext()) {
                Row row = iter.next();
                System.out.println("\nAccount: " +
                        row.get("account").asInteger());
                if (row.get("person").isNull()) {
                    System.out.println("No person field");
                } else {
                    System.out.println(row.get("person").asMap());
                }
            }
        } finally {
            if (iter != null) {
                iter.close();
            }
        }
    }

 final String tableName = "complexUsers";

        Table table = getTable(tableName);

        /*
         * Insert rows into table.
         */
        Row row = table.createRow();
        RecordValue recordValue = row.putRecord("name");
        recordValue.put("firstName", "Joseph");
        recordValue.put("lastName", "Johnson");
        ArrayValue arrayValue = row.putArray("likes");
        arrayValue.add(new String[]{"sports"});
        MapValue mapValue = row.putMap("optionalInformation");
        mapValue.put("email", "jjson@email.com");
        row.put("userID", 2);
        getTableAPI().putIfAbsent(row, null, null);

        row = table.createRow();
        recordValue = row.putRecord("name");
        recordValue.put("firstName", "Burt");
        recordValue.put("lastName", "Nova");
        arrayValue = row.putArray("likes");
        arrayValue.add(new String[]{"sports", "movies", "technology"});
        mapValue = row.putMap("optionalInformation");
        row.put("userID", 3);
        getTableAPI().putIfAbsent(row, null, null);

        /*
         * Retrieve information using the secondary index
         * Retrieve all the rows with the value "movies" in the "likes" array
         * field.
         */
        Index index = table.getIndex("arrayIndex");

        /*
         * Create an IndexKey to request the information.
         */
        IndexKey indexKey = index.createIndexKey();
        indexKey.put("likes[]", "movies"); /* match "movies" */

        TableIterator<Row> iter = getTableAPI().tableIterator(indexKey, null, null);
        System.out.println("\nUsers who \"like\" movies");
        try {
            while (iter.hasNext()) {
                row = iter.next();
                System.out.println(row.toJsonString(true));
            }
            iter.close();
            iter = null;

            /*
             * Do it again with "sports"
             */
            indexKey.put("likes[]", "sports");
            iter = getTableAPI().tableIterator(indexKey, null, null);
            System.out.println("\nUsers who \"like\" sports");
            while (iter.hasNext()) {
                row = iter.next();
                System.out.println(row.toJsonString(true));
            }
        } finally {
            if (iter != null) {
                iter.close();
            }
        }

        return null;
    }

}


TableAPI tableH = kvstore.getTableAPI();
/* 
 * get the Table, but be careful about doing this frequently,
 * as it performs a remote call.
 */
Table myTable = tableH.getTable("myTable");
PrimaryKey key = myTable.createPrimaryKey();

try {

    /* create and use an iterator on the Row value */
    TableIterator<Row> rowIter = tableH.tableIterator(key, null, null);
    while (rowIter.hasNext()) {
        Row row = rowIter.next();
        /* do something */
    }

    /* 
     * Or...
     * create and use an iterator on the PrimaryKey values.
     * This is much faster than fetching the data as well if
     * you only need fields in the primary key.
     */
    TableIterator<PrimaryKey> keyIter =
              tableH.tableKeysIterator(key, null, null);
    while (keyIter.hasNext()) {
        PrimaryKey key = rowIter.next();
        /* do something */
    }
} catch (FaultException fe) {
}



# FETCH ROW
PrimaryKey key = myTable.createPrimaryKey();
key.put("item", "Bolts");

// Retrieve the row. This performs a store read operation.
// Exception handling is skipped for this trivial example.
Row row = tableH.get(key, null);

// Now retrieve the individual fields from the row.
String item = row.get("item").asString().get();
String description = row.get("description").asString().get();
Integer count = row.get("count").asInteger().get();
Double percentage = row.get("percentage").asDouble().get(); 